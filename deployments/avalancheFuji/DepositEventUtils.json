{
  "address": "0xe14740465ead19C30FeABf0EE3B9e81b933F3816",
  "abi": [],
  "transactionHash": "0xcad0b3878273dcc604de5403975c21e8fa33d2e263709f2118eb0496cd46a310",
  "receipt": {
    "to": null,
    "from": "0xFb11f15f206bdA02c224EDC744b0E50E46137046",
    "contractAddress": "0xe14740465ead19C30FeABf0EE3B9e81b933F3816",
    "transactionIndex": 0,
    "gasUsed": "1557848",
    "logsBloom": "0x
    "blockHash": "0xb7cc240a68fff2fbb31342baeac97d2159df0405cd262c463fbb762194f69b1d",
    "transactionHash": "0xcad0b3878273dcc604de5403975c21e8fa33d2e263709f2118eb0496cd46a310",
    "logs": [],
    "blockNumber": 32135266,
    "cumulativeGasUsed": "1557848",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 16,
  "solcInputHash": "d8670d0ce04e567240d18d0df240dc84",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deposit/DepositEventUtils.sol\":\"DepositEventUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/deposit/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Deposit\\n// @dev Struct for deposits\\nlibrary Deposit {\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n    }\\n\\n    // @param account the account depositing liquidity\\n    // @param receiver the address to send the liquidity tokens to\\n    // @param callbackContract the callback contract\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the market to deposit to\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialLongToken;\\n        address initialShortToken;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param initialLongTokenAmount the amount of long tokens to deposit\\n    // @param initialShortTokenAmount the amount of short tokens to deposit\\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\\n    // @param updatedAtBlock the block that the deposit was last updated at\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    struct Numbers {\\n        uint256 initialLongTokenAmount;\\n        uint256 initialShortTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtBlock;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function initialLongToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialLongToken;\\n    }\\n\\n    function setInitialLongToken(Props memory props, address value) internal pure {\\n        props.addresses.initialLongToken = value;\\n    }\\n\\n    function initialShortToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialShortToken;\\n    }\\n\\n    function setInitialShortToken(Props memory props, address value) internal pure {\\n        props.addresses.initialShortToken = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialLongTokenAmount;\\n    }\\n\\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialLongTokenAmount = value;\\n    }\\n\\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialShortTokenAmount;\\n    }\\n\\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialShortTokenAmount = value;\\n    }\\n\\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minMarketTokens;\\n    }\\n\\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minMarketTokens = value;\\n    }\\n\\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtBlock;\\n    }\\n\\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtBlock = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n}\\n\",\"keccak256\":\"0x963052063dfaa24fb4c798a427d7916845d2950f71080a171f4193432def3172\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Deposit.sol\\\";\\n\\nlibrary DepositEventUtils {\\n    using Deposit for Deposit.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitDepositCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Deposit.Props memory deposit\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(6);\\n        eventData.addressItems.setItem(0, \\\"account\\\", deposit.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", deposit.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", deposit.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", deposit.market());\\n        eventData.addressItems.setItem(4, \\\"initialLongToken\\\", deposit.initialLongToken());\\n        eventData.addressItems.setItem(5, \\\"initialShortToken\\\", deposit.initialShortToken());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", deposit.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", deposit.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"initialLongTokenAmount\\\", deposit.initialLongTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"initialShortTokenAmount\\\", deposit.initialShortTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minMarketTokens\\\", deposit.minMarketTokens());\\n        eventData.uintItems.setItem(3, \\\"updatedAtBlock\\\", deposit.updatedAtBlock());\\n        eventData.uintItems.setItem(4, \\\"updatedAtTime\\\", deposit.updatedAtTime());\\n        eventData.uintItems.setItem(5, \\\"executionFee\\\", deposit.executionFee());\\n        eventData.uintItems.setItem(6, \\\"callbackGasLimit\\\", deposit.callbackGasLimit());\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", deposit.shouldUnwrapNativeToken());\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositCreated\\\",\\n            key,\\n            Cast.toBytes32(deposit.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitDepositExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        uint256 longTokenAmount,\\n        uint256 shortTokenAmount,\\n        uint256 receivedMarketTokens\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"receivedMarketTokens\\\", receivedMarketTokens);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitDepositCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cba5b124f6441209c3fc554f0ef0bcae2844c3602548166b25711567b86d0\",\"license\":\"BUSL-1.1\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // AutoCancelUtils errors\\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n\\n    // BaseRouter\\n    error CouldNotSendNativeToken(address receiver, uint256 amount);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error InvalidFeeFactor(bytes32 baseKey, uint256 value);\\n    error InvalidClaimableFactor(uint256 value);\\n    error PriceFeedAlreadyExistsForToken(address token);\\n    error DataStreamIdAlreadyExistsForToken(address token);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address receiver);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // ExchangeUtils errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // ExternalHandler errors\\n    error ExternalCallFailed(bytes data);\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\n    error InvalidExternalCallTarget(address target);\\n\\n    // FeeBatchStoreUtils errors\\n    error FeeBatchNotFound(bytes32 key);\\n\\n    // FeeDistributor errors\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\n\\n    // GlpMigrator errors\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidClaimFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolAmountForDepositExceeded(uint256 poolAmount, uint256 maxPoolAmountForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // Oracle errors\\n    error EmptyValidatedPrices();\\n    error InvalidOracleProvider(address provider);\\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\\n    error GmEmptySigner(uint256 signerIndex);\\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error EmptyDataStreamFeedId(address token);\\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyChainlinkPriceFeedMultiplier(address token);\\n    error EmptyDataStreamMultiplier(address token);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidGmOraclePrice(address token);\\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyChainlinkPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error EmptyCompactedPrice(uint256 index);\\n    error EmptyCompactedBlockNumber(uint256 index);\\n    error EmptyCompactedTimestamp(uint256 index);\\n    error UnsupportedOracleBlockNumberType(uint256 oracleBlockNumberType);\\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType();\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n\\n    // TokenUtils errors\\n    error EmptyTokenTranferGasLimit(address token);\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n    error InvalidReceiver();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InsufficientWntAmount(uint256 wntAmount, uint256 executionFee);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n}\\n\",\"keccak256\":\"0xd22e57b4d5a533b7773fcdef4e9dc0b78f8239fc4f3cf90bcf0794a232892aea\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./EventUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    event EventLog(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog1(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog2(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        bytes32 indexed topic2,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param eventData the event data\\n    function emitEventLog(\\n        string memory eventName,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param eventData the event data\\n    function emitEventLog1(\\n        string memory eventName,\\n        bytes32 topic1,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog1(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param topic2 topic2 for indexing\\n    // @param eventData the event data\\n    function emitEventLog2(\\n        string memory eventName,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog2(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            topic2,\\n            eventData\\n        );\\n    }\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x160c1835150b3cc703cfc9ffdb74138b3c4939a0f6988171113e37cbf1f0f90e\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EventUtils {\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n}\\n\",\"keccak256\":\"0x42c23cd06e17a2eb9c6d86015316f42acef002eaab1010aad9df98450523bad9\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     * Hash: 0x56908b85b56869d7c69cd020749874f238259af9646ca930287866cdd660b7d9\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     * Hash: 0xf49b0c86b385620e25b0985905d1a112a5f1bc1d51a7a292a8cdf112b3a7c47c\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     * Hash: 0xe068a8d811c3c8290a8be34607cfa3184b26ffb8dea4dde7a451adfba9fa173a\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     * Hash: 0x901fb3de937a1dcb6ecaf26886fda47a088e74f36232a0673eade97079dc225b\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The LIMITED_CONFIG_KEEPER role.\\n     * Hash: 0xb49beded4d572a2d32002662fc5c735817329f4337b3a488aab0b5e835c01ba7\\n     */\\n    bytes32 public constant LIMITED_CONFIG_KEEPER = keccak256(abi.encode(\\\"LIMITED_CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     * Hash: 0x97adf037b2472f4a6a9825eff7d2dd45e37f2dc308df2a260d6a72af4189a65b\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\n     * Hash: 0x16a157db08319d4eaf6b157a71f5d2e18c6500cab8a25bee0b4f9c753cb13690\\n     */\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     * Hash: 0xc82e6cc76072f8edb32d42796e58e13ab6e145524eb6b36c073be82f20d410f3\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     * Hash: 0xd66692c70b60cf1337e643d6a6473f6865d8c03f3c26b460df3d19b504fb46ae\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     * Hash: 0xe0ff4cc0c6ecffab6db3f63ea62dd53f8091919ac57669f1bb3d9828278081d8\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\n     * Hash: 0xc23a98a1bf683201c11eeeb8344052ad3bc603c8ddcad06093edc1e8dafa96a2\\n     */\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     * Hash: 0x40a07f8f0fc57fcf18b093d96362a8e661eaac7b7e6edbf66f242111f83a6794\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     * Hash: 0xcb6c7bc0d25d73c91008af44527b80c56dee4db8965845d926a25659a4a8bc07\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     * Hash: 0x2700e36dc4e6a0daa977bffd4368adbd48f8058da74152919f91f58eddb42103\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     * Hash: 0x556c788ffc0574ec93966d808c170833d96489c9c58f5bcb3dadf711ba28720e\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     * Hash: 0xb37d64edaeaf5e634c13682dbd813f5a12fec9eb4f74433a089e7a3c3289af91\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n}\\n\",\"keccak256\":\"0x69e61559b9638a631d238c4b3780355190b3a94041e73154cf373aa9e021c968\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\n     */\\n    modifier onlyTimelockMultisig() {\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\n     */\\n    modifier onlyTimelockAdmin() {\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyConfigKeeper() {\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\n     */\\n    modifier onlyGovTokenController() {\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeKeeper() {\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeDistributionKeeper() {\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Errors.Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6d539917bd060144f9e204c4a2d2778bf38696d39c5ddefc128ca8c3fdea5ed\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _grantRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _revokeRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\n        return roleCache[account][roleKey];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\n        return roleMembers[roleKey].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[roleKey].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 roleKey) internal {\\n        roles.add(roleKey);\\n        roleMembers[roleKey].add(account);\\n        roleCache[account][roleKey] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\n        roleMembers[roleKey].remove(account);\\n        roleCache[account][roleKey] = false;\\n\\n        if (roleMembers[roleKey].length() == 0) {\\n            if (roleKey == Role.ROLE_ADMIN) {\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\n            }\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7be1876450ec19568c0e12e4238332c96eb921974a19c0e4a6fe1fb943bf6d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Cast\\n * @dev Library for casting functions\\n */\\nlibrary Cast {\\n    function toBytes32(address value) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(value)));\\n    }\\n}\\n\",\"keccak256\":\"0x873841fcb56173678e4584c2fcec648b98bc7d9f2c96906750791c19a3372c9b\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x611b3361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806311f35ffd146100505780632365fa23146100725780636e97665414610092575b600080fd5b81801561005c57600080fd5b5061007061006b366004610ca6565b6100b2565b005b81801561007e57600080fd5b5061007061008d366004610dea565b610282565b81801561009e57600080fd5b506100706100ad366004611004565b6103f5565b6100ba610b8d565b60808101516100ca9060016108bc565b6040805180820190915260038152626b657960e81b602082015260808201516100f69160009089610921565b80516101039060016108bc565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516101309160009088610974565b60208101516101409060036108bc565b61018360006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b815250868460200151610921909392919063ffffffff16565b6101c760016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b815250858460200151610921909392919063ffffffff16565b61020f60026040518060400160405280601481526020017372656365697665644d61726b6574546f6b656e7360601b815250848460200151610921909392919063ffffffff16565b866001600160a01b03166363d1636387610228886109d1565b846040518463ffffffff1660e01b815260040161024793929190611a18565b600060405180830381600087803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b5050505050505050505050565b61028a610b8d565b608081015161029a9060016108bc565b6040805180820190915260038152626b657960e81b602082015260808201516102c69160009088610921565b80516102d39060016108bc565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516103009160009087610974565b60c08101516103109060016109dd565b6040805180820190915260068152653932b0b9b7b760d11b602082015260c082015161033f9160009086610a3f565b60a081015161034f9060016109dd565b60408051808201909152600b81526a726561736f6e427974657360a81b602082015260a08201516103839160009085610a3f565b856001600160a01b03166363d163638661039c876109d1565b846040518463ffffffff1660e01b81526004016103bb93929190611a5d565b600060405180830381600087803b1580156103d557600080fd5b505af11580156103e9573d6000803e3d6000fd5b50505050505050505050565b6103fd610b8d565b805161040a9060066108bc565b6104426000604051806040016040528060078152602001661858d8dbdd5b9d60ca1b81525061043885515190565b8451929190610974565b6104746001604051806040016040528060088152602001673932b1b2b4bb32b960c11b81525061043885516020015190565b6104ae60026040518060400160405280601081526020016f18d85b1b189858dad0dbdb9d1c9858dd60821b81525061043885516040015190565b6104de6003604051806040016040528060068152602001651b585c9ad95d60d21b81525061043885516080015190565b61051860046040518060400160405280601081526020016f34b734ba34b0b62637b733aa37b5b2b760811b815250610438855160a0015190565b61055360056040518060400160405280601181526020017034b734ba34b0b629b437b93a2a37b5b2b760791b815250610438855160c0015190565b8051610560906002610a91565b6105a56000604051806040016040528060118152602001700d8dedccea8ded6cadca6eec2e0a0c2e8d607b1b81525061059b855160e0015190565b8451929190610afb565b6105e26001604051806040016040528060128152602001710e6d0dee4e8a8ded6cadca6eec2e0a0c2e8d60731b81525061059b8551610100015190565b60208101516105f29060076108bc565b61063f6000604051806040016040528060168152602001751a5b9a5d1a585b131bdb99d51bdad95b905b5bdd5b9d60521b81525061063285602001515190565b6020850151929190610921565b6106836001604051806040016040528060178152602001761a5b9a5d1a585b14da1bdc9d151bdad95b905b5bdd5b9d604a1b81525061063285602090810151015190565b6106bf60026040518060400160405280600f81526020016e6d696e4d61726b6574546f6b656e7360881b81525061063285602001516040015190565b6106fa60036040518060400160405280600e81526020016d757064617465644174426c6f636b60901b81525061063285602001516060015190565b61073460046040518060400160405280600d81526020016c75706461746564417454696d6560981b81525061063285602001516080015190565b61076d60056040518060400160405280600c81526020016b657865637574696f6e46656560a01b815250610632856020015160a0015190565b6107aa60066040518060400160405280601081526020016f18d85b1b189858dad1d85cd31a5b5a5d60821b815250610632856020015160c0015190565b60608101516107ba9060016108bc565b61080860006040518060400160405280601781526020017639b437bab6322ab73bb930b82730ba34bb32aa37b5b2b760491b8152506107fb85604001515190565b6060850151929190610b38565b60808101516108189060016108bc565b6040805180820190915260038152626b657960e81b602082015260808201516108449160009086610921565b836001600160a01b03166363d163638461086561086086515190565b6109d1565b846040518463ffffffff1660e01b815260040161088493929190611aa3565b600060405180830381600087803b15801561089e57600080fd5b505af11580156108b2573d6000803e3d6000fd5b5050505050505050565b806001600160401b038111156108d4576108d4610d02565b60405190808252806020026020018201604052801561091a57816020015b6040805180820190915260608152600060208201528152602001906001900390816108f25790505b5090915250565b818460000151848151811061093857610938611ae7565b602002602001015160000181905250808460000151848151811061095e5761095e611ae7565b6020026020010151602001818152505050505050565b818460000151848151811061098b5761098b611ae7565b60200260200101516000018190525080846000015184815181106109b1576109b1611ae7565b6020908102919091018101516001600160a01b0390921691015250505050565b6001600160a01b031690565b806001600160401b038111156109f5576109f5610d02565b60405190808252806020026020018201604052801561091a57816020015b6040805180820190915260608082526020820152815260200190600190039081610a1357505090915250565b8184600001518481518110610a5657610a56611ae7565b6020026020010151600001819052508084600001518481518110610a7c57610a7c611ae7565b60200260200101516020018190525050505050565b806001600160401b03811115610aa957610aa9610d02565b604051908082528060200260200182016040528015610aee57816020015b6040805180820190915260608082526020820152815260200190600190039081610ac75790505b5082602001819052505050565b8184602001518481518110610b1257610b12611ae7565b6020026020010151600001819052508084602001518481518110610a7c57610a7c611ae7565b8184600001518481518110610b4f57610b4f611ae7565b6020026020010151600001819052508084600001518481518110610b7557610b75611ae7565b60209081029190910181015191151591015250505050565b604080516101208101909152606060e0820181815261010083019190915281908152602001610bcf604051806040016040528060608152602001606081525090565b8152602001610bf1604051806040016040528060608152602001606081525090565b8152602001610c13604051806040016040528060608152602001606081525090565b8152602001610c35604051806040016040528060608152602001606081525090565b8152602001610c57604051806040016040528060608152602001606081525090565b8152602001610c79604051806040016040528060608152602001606081525090565b905290565b6001600160a01b0381168114610c9357600080fd5b50565b8035610ca181610c7e565b919050565b60008060008060008060c08789031215610cbf57600080fd5b8635610cca81610c7e565b9550602087013594506040870135610ce181610c7e565b959894975094956060810135955060808101359460a0909101359350915050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715610d3a57610d3a610d02565b60405290565b60405161012081016001600160401b0381118282101715610d3a57610d3a610d02565b604051601f8201601f191681016001600160401b0381118282101715610d8b57610d8b610d02565b604052919050565b60006001600160401b03831115610dac57610dac610d02565b610dbf601f8401601f1916602001610d63565b9050828152838383011115610dd357600080fd5b828260208301376000602084830101529392505050565b600080600080600060a08688031215610e0257600080fd5b8535610e0d81610c7e565b9450602086013593506040860135610e2481610c7e565b925060608601356001600160401b0380821115610e4057600080fd5b818801915088601f830112610e5457600080fd5b610e6389833560208501610d93565b93506080880135915080821115610e7957600080fd5b508601601f81018813610e8b57600080fd5b610e9a88823560208401610d93565b9150509295509295909350565b600082601f830112610eb857600080fd5b813560206001600160401b03821115610ed357610ed3610d02565b8160051b610ee2828201610d63565b9283528481018201928281019087851115610efc57600080fd5b83870192505b84831015610f24578235610f1581610c7e565b82529183019190830190610f02565b979650505050505050565b600060e08284031215610f4157600080fd5b60405160e081016001600160401b0381118282101715610f6357610f63610d02565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201525092915050565b600060208284031215610fc457600080fd5b604051602081016001600160401b0381118282101715610fe657610fe6610d02565b60405290508082358015158114610ffc57600080fd5b905292915050565b60008060006060848603121561101957600080fd5b833561102481610c7e565b92506020840135915060408401356001600160401b038082111561104757600080fd5b818601915061012080838903121561105e57600080fd5b611066610d18565b83358381111561107557600080fd5b8401808a0383131561108657600080fd5b61108e610d40565b925061109981610c96565b83526110a760208201610c96565b60208401526110b860408201610c96565b60408401526110c960608201610c96565b60608401526110da60808201610c96565b60808401526110eb60a08201610c96565b60a08401526110fc60c08201610c96565b60c084015260e08101358481111561111357600080fd5b61111f8b828401610ea7565b60e085015250610100808201358581111561113957600080fd5b6111458c828501610ea7565b828601525083835261115a8b60208801610f2f565b602084015261116b8b828801610fb2565b60408401525050809450505050509250925092565b6000815180845260005b818110156111a65760208185018101518683018201520161118a565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b810191508286016000805b86811015611261578385038a5282516040815181885261120782890182611180565b92890151888403898b01528051808552908a01938693508a0191505b8083101561124c5783516001600160a01b03168252928901926001929092019190890190611223565b509b88019b96505050918501916001016111e5565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156112e657898603605f19018452845180518888526112c089890182611180565b918401516001600160a01b0316978401979097529550938101939281019260010161129c565b50808801519550888503818a01525050505061130281836111c6565b95945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015611261578385038a5282516040815181885261134c82890182611180565b92890151888403898b01528051808552908a01938693508a0191505b808310156113885783518252928901926001929092019190890190611368565b509b88019b965050509185019160010161132a565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561140b57898603605f19018452845180518888526113ee89890182611180565b9184015197840197909752955093810193928101926001016113ca565b50808801519550888503818a015250505050611302818361130b565b600081518084526020808501808196508360051b810191508286016000805b86811015611261578385038a5282516040815181885261146882890182611180565b92890151888403898b01528051808552908a01938693508a0191505b808310156114a45783518252928901926001929092019190890190611484565b509b88019b9650505091850191600101611446565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561152757898603605f190184528451805188885261150a89890182611180565b9184015197840197909752955093810193928101926001016114e6565b50808801519550888503818a0152505050506113028183611427565b600081518084526020808501808196508360051b810191508286016000805b86811015611261578385038a5282516040815181885261158482890182611180565b92890151888403898b01528051808552908a01938693508a0191505b808310156115c2578351151582529289019260019290920191908901906115a0565b509b88019b9650505091850191600101611562565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561164757898603605f190184528451805188885261162889890182611180565b9184015115159784019790975295509381019392810192600101611604565b50808801519550888503818a0152505050506113028183611543565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561140b57898603605f19018452845180518888526116b489890182611180565b918401519784019790975295509381019392810192600101611690565b600081518084526020808501808196506005915083821b81018387016000805b8781101561177c578484038b5282516040815181875261171382880182611180565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561176557601f19858303018452611753828751611180565b958d0195938d01939150600101611737565b509e8b019e975050509388019350506001016116f1565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561180857898603605f19018452845180518888526117dc89890182611180565b91840151888303898601529190506117f48183611180565b9750505093810193928101926001016117b8565b50808801519550888503818a01525050505061130281836116d1565b600081518084526020808501808196506005915083821b81018387016000805b8781101561177c578484038b5282516040815181875261186682880182611180565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b828110156118b857601f198583030184526118a6828751611180565b958d0195938d0193915060010161188a565b509e8b019e97505050938801935050600101611844565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561194c57898603605f190184528451805188885261192089890182611180565b91840151888303898601529190506119388183611180565b9750505093810193928101926001016118fc565b50808801519550888503818a0152505050506113028183611824565b6000815160e0845261197d60e085018261126f565b905060208301518482036020860152611996828261139d565b915050604083015184820360408601526119b082826114b9565b915050606083015184820360608601526119ca82826115d7565b915050608083015184820360808601526119e48282611663565b91505060a083015184820360a08601526119fe828261178b565b91505060c083015184820360c086015261130282826118cf565b60808152600f60808201526e11195c1bdcda5d115e1958dd5d1959608a1b60a082015283602082015282604082015260c06060820152600061130260c0830184611968565b60808152601060808201526f11195c1bdcda5d10d85b98d95b1b195960821b60a082015283602082015282604082015260c06060820152600061130260c0830184611968565b60808152600e60808201526d11195c1bdcda5d10dc99585d195960921b60a082015283602082015282604082015260c06060820152600061130260c0830184611968565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a3b49cfe6cd89f7dfb66f711f4755b819fc1cbf94a82ae054fb4e9a834f7147264736f6c63430008120033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806311f35ffd146100505780632365fa23146100725780636e97665414610092575b600080fd5b81801561005c57600080fd5b5061007061006b366004610ca6565b6100b2565b005b81801561007e57600080fd5b5061007061008d366004610dea565b610282565b81801561009e57600080fd5b506100706100ad366004611004565b6103f5565b6100ba610b8d565b60808101516100ca9060016108bc565b6040805180820190915260038152626b657960e81b602082015260808201516100f69160009089610921565b80516101039060016108bc565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516101309160009088610974565b60208101516101409060036108bc565b61018360006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b815250868460200151610921909392919063ffffffff16565b6101c760016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b815250858460200151610921909392919063ffffffff16565b61020f60026040518060400160405280601481526020017372656365697665644d61726b6574546f6b656e7360601b815250848460200151610921909392919063ffffffff16565b866001600160a01b03166363d1636387610228886109d1565b846040518463ffffffff1660e01b815260040161024793929190611a18565b600060405180830381600087803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b5050505050505050505050565b61028a610b8d565b608081015161029a9060016108bc565b6040805180820190915260038152626b657960e81b602082015260808201516102c69160009088610921565b80516102d39060016108bc565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516103009160009087610974565b60c08101516103109060016109dd565b6040805180820190915260068152653932b0b9b7b760d11b602082015260c082015161033f9160009086610a3f565b60a081015161034f9060016109dd565b60408051808201909152600b81526a726561736f6e427974657360a81b602082015260a08201516103839160009085610a3f565b856001600160a01b03166363d163638661039c876109d1565b846040518463ffffffff1660e01b81526004016103bb93929190611a5d565b600060405180830381600087803b1580156103d557600080fd5b505af11580156103e9573d6000803e3d6000fd5b50505050505050505050565b6103fd610b8d565b805161040a9060066108bc565b6104426000604051806040016040528060078152602001661858d8dbdd5b9d60ca1b81525061043885515190565b8451929190610974565b6104746001604051806040016040528060088152602001673932b1b2b4bb32b960c11b81525061043885516020015190565b6104ae60026040518060400160405280601081526020016f18d85b1b189858dad0dbdb9d1c9858dd60821b81525061043885516040015190565b6104de6003604051806040016040528060068152602001651b585c9ad95d60d21b81525061043885516080015190565b61051860046040518060400160405280601081526020016f34b734ba34b0b62637b733aa37b5b2b760811b815250610438855160a0015190565b61055360056040518060400160405280601181526020017034b734ba34b0b629b437b93a2a37b5b2b760791b815250610438855160c0015190565b8051610560906002610a91565b6105a56000604051806040016040528060118152602001700d8dedccea8ded6cadca6eec2e0a0c2e8d607b1b81525061059b855160e0015190565b8451929190610afb565b6105e26001604051806040016040528060128152602001710e6d0dee4e8a8ded6cadca6eec2e0a0c2e8d60731b81525061059b8551610100015190565b60208101516105f29060076108bc565b61063f6000604051806040016040528060168152602001751a5b9a5d1a585b131bdb99d51bdad95b905b5bdd5b9d60521b81525061063285602001515190565b6020850151929190610921565b6106836001604051806040016040528060178152602001761a5b9a5d1a585b14da1bdc9d151bdad95b905b5bdd5b9d604a1b81525061063285602090810151015190565b6106bf60026040518060400160405280600f81526020016e6d696e4d61726b6574546f6b656e7360881b81525061063285602001516040015190565b6106fa60036040518060400160405280600e81526020016d757064617465644174426c6f636b60901b81525061063285602001516060015190565b61073460046040518060400160405280600d81526020016c75706461746564417454696d6560981b81525061063285602001516080015190565b61076d60056040518060400160405280600c81526020016b657865637574696f6e46656560a01b815250610632856020015160a0015190565b6107aa60066040518060400160405280601081526020016f18d85b1b189858dad1d85cd31a5b5a5d60821b815250610632856020015160c0015190565b60608101516107ba9060016108bc565b61080860006040518060400160405280601781526020017639b437bab6322ab73bb930b82730ba34bb32aa37b5b2b760491b8152506107fb85604001515190565b6060850151929190610b38565b60808101516108189060016108bc565b6040805180820190915260038152626b657960e81b602082015260808201516108449160009086610921565b836001600160a01b03166363d163638461086561086086515190565b6109d1565b846040518463ffffffff1660e01b815260040161088493929190611aa3565b600060405180830381600087803b15801561089e57600080fd5b505af11580156108b2573d6000803e3d6000fd5b5050505050505050565b806001600160401b038111156108d4576108d4610d02565b60405190808252806020026020018201604052801561091a57816020015b6040805180820190915260608152600060208201528152602001906001900390816108f25790505b5090915250565b818460000151848151811061093857610938611ae7565b602002602001015160000181905250808460000151848151811061095e5761095e611ae7565b6020026020010151602001818152505050505050565b818460000151848151811061098b5761098b611ae7565b60200260200101516000018190525080846000015184815181106109b1576109b1611ae7565b6020908102919091018101516001600160a01b0390921691015250505050565b6001600160a01b031690565b806001600160401b038111156109f5576109f5610d02565b60405190808252806020026020018201604052801561091a57816020015b6040805180820190915260608082526020820152815260200190600190039081610a1357505090915250565b8184600001518481518110610a5657610a56611ae7565b6020026020010151600001819052508084600001518481518110610a7c57610a7c611ae7565b60200260200101516020018190525050505050565b806001600160401b03811115610aa957610aa9610d02565b604051908082528060200260200182016040528015610aee57816020015b6040805180820190915260608082526020820152815260200190600190039081610ac75790505b5082602001819052505050565b8184602001518481518110610b1257610b12611ae7565b6020026020010151600001819052508084602001518481518110610a7c57610a7c611ae7565b8184600001518481518110610b4f57610b4f611ae7565b6020026020010151600001819052508084600001518481518110610b7557610b75611ae7565b60209081029190910181015191151591015250505050565b604080516101208101909152606060e0820181815261010083019190915281908152602001610bcf604051806040016040528060608152602001606081525090565b8152602001610bf1604051806040016040528060608152602001606081525090565b8152602001610c13604051806040016040528060608152602001606081525090565b8152602001610c35604051806040016040528060608152602001606081525090565b8152602001610c57604051806040016040528060608152602001606081525090565b8152602001610c79604051806040016040528060608152602001606081525090565b905290565b6001600160a01b0381168114610c9357600080fd5b50565b8035610ca181610c7e565b919050565b60008060008060008060c08789031215610cbf57600080fd5b8635610cca81610c7e565b9550602087013594506040870135610ce181610c7e565b959894975094956060810135955060808101359460a0909101359350915050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715610d3a57610d3a610d02565b60405290565b60405161012081016001600160401b0381118282101715610d3a57610d3a610d02565b604051601f8201601f191681016001600160401b0381118282101715610d8b57610d8b610d02565b604052919050565b60006001600160401b03831115610dac57610dac610d02565b610dbf601f8401601f1916602001610d63565b9050828152838383011115610dd357600080fd5b828260208301376000602084830101529392505050565b600080600080600060a08688031215610e0257600080fd5b8535610e0d81610c7e565b9450602086013593506040860135610e2481610c7e565b925060608601356001600160401b0380821115610e4057600080fd5b818801915088601f830112610e5457600080fd5b610e6389833560208501610d93565b93506080880135915080821115610e7957600080fd5b508601601f81018813610e8b57600080fd5b610e9a88823560208401610d93565b9150509295509295909350565b600082601f830112610eb857600080fd5b813560206001600160401b03821115610ed357610ed3610d02565b8160051b610ee2828201610d63565b9283528481018201928281019087851115610efc57600080fd5b83870192505b84831015610f24578235610f1581610c7e565b82529183019190830190610f02565b979650505050505050565b600060e08284031215610f4157600080fd5b60405160e081016001600160401b0381118282101715610f6357610f63610d02565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201525092915050565b600060208284031215610fc457600080fd5b604051602081016001600160401b0381118282101715610fe657610fe6610d02565b60405290508082358015158114610ffc57600080fd5b905292915050565b60008060006060848603121561101957600080fd5b833561102481610c7e565b92506020840135915060408401356001600160401b038082111561104757600080fd5b818601915061012080838903121561105e57600080fd5b611066610d18565b83358381111561107557600080fd5b8401808a0383131561108657600080fd5b61108e610d40565b925061109981610c96565b83526110a760208201610c96565b60208401526110b860408201610c96565b60408401526110c960608201610c96565b60608401526110da60808201610c96565b60808401526110eb60a08201610c96565b60a08401526110fc60c08201610c96565b60c084015260e08101358481111561111357600080fd5b61111f8b828401610ea7565b60e085015250610100808201358581111561113957600080fd5b6111458c828501610ea7565b828601525083835261115a8b60208801610f2f565b602084015261116b8b828801610fb2565b60408401525050809450505050509250925092565b6000815180845260005b818110156111a65760208185018101518683018201520161118a565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b810191508286016000805b86811015611261578385038a5282516040815181885261120782890182611180565b92890151888403898b01528051808552908a01938693508a0191505b8083101561124c5783516001600160a01b03168252928901926001929092019190890190611223565b509b88019b96505050918501916001016111e5565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156112e657898603605f19018452845180518888526112c089890182611180565b918401516001600160a01b0316978401979097529550938101939281019260010161129c565b50808801519550888503818a01525050505061130281836111c6565b95945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015611261578385038a5282516040815181885261134c82890182611180565b92890151888403898b01528051808552908a01938693508a0191505b808310156113885783518252928901926001929092019190890190611368565b509b88019b965050509185019160010161132a565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561140b57898603605f19018452845180518888526113ee89890182611180565b9184015197840197909752955093810193928101926001016113ca565b50808801519550888503818a015250505050611302818361130b565b600081518084526020808501808196508360051b810191508286016000805b86811015611261578385038a5282516040815181885261146882890182611180565b92890151888403898b01528051808552908a01938693508a0191505b808310156114a45783518252928901926001929092019190890190611484565b509b88019b9650505091850191600101611446565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561152757898603605f190184528451805188885261150a89890182611180565b9184015197840197909752955093810193928101926001016114e6565b50808801519550888503818a0152505050506113028183611427565b600081518084526020808501808196508360051b810191508286016000805b86811015611261578385038a5282516040815181885261158482890182611180565b92890151888403898b01528051808552908a01938693508a0191505b808310156115c2578351151582529289019260019290920191908901906115a0565b509b88019b9650505091850191600101611562565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561164757898603605f190184528451805188885261162889890182611180565b9184015115159784019790975295509381019392810192600101611604565b50808801519550888503818a0152505050506113028183611543565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561140b57898603605f19018452845180518888526116b489890182611180565b918401519784019790975295509381019392810192600101611690565b600081518084526020808501808196506005915083821b81018387016000805b8781101561177c578484038b5282516040815181875261171382880182611180565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561176557601f19858303018452611753828751611180565b958d0195938d01939150600101611737565b509e8b019e975050509388019350506001016116f1565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561180857898603605f19018452845180518888526117dc89890182611180565b91840151888303898601529190506117f48183611180565b9750505093810193928101926001016117b8565b50808801519550888503818a01525050505061130281836116d1565b600081518084526020808501808196506005915083821b81018387016000805b8781101561177c578484038b5282516040815181875261186682880182611180565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b828110156118b857601f198583030184526118a6828751611180565b958d0195938d0193915060010161188a565b509e8b019e97505050938801935050600101611844565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561194c57898603605f190184528451805188885261192089890182611180565b91840151888303898601529190506119388183611180565b9750505093810193928101926001016118fc565b50808801519550888503818a0152505050506113028183611824565b6000815160e0845261197d60e085018261126f565b905060208301518482036020860152611996828261139d565b915050604083015184820360408601526119b082826114b9565b915050606083015184820360608601526119ca82826115d7565b915050608083015184820360808601526119e48282611663565b91505060a083015184820360a08601526119fe828261178b565b91505060c083015184820360c086015261130282826118cf565b60808152600f60808201526e11195c1bdcda5d115e1958dd5d1959608a1b60a082015283602082015282604082015260c06060820152600061130260c0830184611968565b60808152601060808201526f11195c1bdcda5d10d85b98d95b1b195960821b60a082015283602082015282604082015260c06060820152600061130260c0830184611968565b60808152600e60808201526d11195c1bdcda5d10dc99585d195960921b60a082015283602082015282604082015260c06060820152600061130260c0830184611968565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a3b49cfe6cd89f7dfb66f711f4755b819fc1cbf94a82ae054fb4e9a834f7147264736f6c63430008120033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}